'use strict';

/*!
 * Module dependencies.
 */

const MongooseError = require('./error/index');
const $exists = require('./schema/operators/exists');
const $type = require('./schema/operators/type');
const get = require('./helpers/get');
const handleImmutable = require('./helpers/schematype/handleImmutable');
const immediate = require('./helpers/immediate');
const schemaTypeSymbol = require('./helpers/symbols').schemaTypeSymbol;
const util = require('util');
const utils = require('./utils');
const validatorErrorSymbol = require('./helpers/symbols').validatorErrorSymbol;

const CastError = MongooseError.CastError;
const ValidatorError = MongooseError.ValidatorError;

/**
 * SchemaType constructor. Do **not** instantiate `SchemaType` directly.
 * Mongoose converts your schema paths into SchemaTypes automatically.
 *
 * ####Example:
 *
 *     const schema = new Schema({ name: String });
 *     schema.path('name') instanceof SchemaType; // true
 *
 * @param {String} path
 * @param {Object} [options]
 * @param {String} [instance]
 * @api public
 */

function SchemaType(path, options, instance) {
  this[schemaTypeSymbol] = true;
  this.path = path;
  this.instance = instance;
  this.validators = [];
  this.getters = this.constructor.hasOwnProperty('getters') ?
    this.constructor.getters.slice() :
    [];
  this.setters = [];
  this.options = options;
  this._index = null;
  this.selected;
  if (utils.hasUserDefinedProperty(options, 'immutable')) {
    this.$immutable = options.immutable;

    handleImmutable(this);
  }

  for (const prop in options) {
    if (this[prop] && typeof this[prop] === 'function') {
      // { unique: true, index: true }
      if (prop === 'index' && this._index) {
        if (options.index === false) {
          const index = this._index;
          if (typeof index === 'object' && index != null) {
            if (index.unique) {
              throw new Error('Path "' + this.path + '" may not have `index` ' +
                'set to false and `unique` set to true');
            }
            if (index.sparse) {
              throw new Error('Path "' + this.path + '" may not have `index` ' +
                'set to false and `sparse` set to true');
            }
          }

          this._index = false;
        }
        continue;
      }

      const val = options[prop];
      // Special case so we don't screw up array defaults, see gh-5780
      if (prop === 'default') {
        this.default(val);
        continue;
      }

      const opts = Array.isArray(val) ? val : [val];

      this[prop].apply(this, opts);
    }
  }

  Object.defineProperty(this, '$$context', {
    enumerable: false,
    configurable: false,
    writable: true,
    value: null
  });
}

/**
 * Get/set the function used to cast arbitrary values to this type.
 *
 * ####Example:
 *
 *     // Disallow `null` for numbers, and don't try to cast any values to
 *     // numbers, so even strings like '123' will cause a CastError.
 *     mongoose.Number.cast(function(v) {
 *       assert.ok(v === undefined || typeof v === 'number');
 *       return v;
 *     });
 *
 * @param {Function|false} caster Function that casts arbitrary values to this type, or throws an error if casting failed
 * @return {Function}
 * @static
 * @receiver SchemaType
 * @function cast
 * @api public
 */

SchemaType.cast = function cast(caster) {
  if (arguments.length === 0) {
    return this._cast;
  }
  if (caster === false) {
    caster = v => v;
  }
  this._cast = caster;

  return this._cast;
};

/**
 * Attaches a getter for all instances of this schema type.
 *
 * ####Example:
 *
 *     // Make all numbers round down
 *     mongoose.Number.get(function(v) { return Math.floor(v); });
 *
 * @param {Function} getter
 * @return {this}
 * @static
 * @receiver SchemaType
 * @function get
 * @api public
 */

SchemaType.get = function(getter) {
  this.getters = this.hasOwnProperty('getters') ? this.getters : [];
  this.getters.push(getter);
};

/**
 * Sets a default value for this SchemaType.
 *
 * ####Example:
 *
 *     var schema = new Schema({ n: { type: Number, default: 10 })
 *     var M = db.model('M', schema)
 *     var m = new M;
 *     console.log(m.n) // 10
 *
 * Defaults can be either `functions` which return the value to use as the default or the literal value itself. Either way, the value will be cast based on its schema type before being set during document creation.
 *
 * ####Example:
 *
 *     // values are cast:
 *     var schema = new Schema({ aNumber: { type: Number, default: 4.815162342 }})
 *     var M = db.model('M', schema)
 *     var m = new M;
 *     console.log(m.aNumber) // 4.815162342
 *
 *     // default unique objects for Mixed types:
 *     var schema = new Schema({ mixed: Schema.Types.Mixed });
 *     schema.path('mixed').default(function () {
 *       return {};
 *     });
 *
 *     // if we don't use a function to return object literals for Mixed defaults,
 *     // each document will receive a reference to the same object literal creating
 *     // a "shared" object instance:
 *     var schema = new Schema({ mixed: Schema.Types.Mixed });
 *     schema.path('mixed').default({});
 *     var M = db.model('M', schema);
 *     var m1 = new M;
 *     m1.mixed.added = 1;
 *     console.log(m1.mixed); // { added: 1 }
 *     var m2 = new M;
 *     console.log(m2.mixed); // { added: 1 }
 *
 * @param {Function|any} val the default value
 * @return {defaultValue}
 * @api public
 */

SchemaType.prototype.default = function(val) {
  if (arguments.length === 1) {
    if (val === void 0) {
      this.defaultValue = void 0;
      return void 0;
    }
    this.defaultValue = val;
    return this.defaultValue;
  } else if (arguments.length > 1) {
    this.defaultValue = utils.args(arguments);
  }
  return this.defaultValue;
};

/**
 * Declares the index options for this schematype.
 *
 * ####Example:
 *
 *     var s = new Schema({ name: { type: String, index: true })
 *     var s = new Schema({ loc: { type: [Number], index: 'hashed' })
 *     var s = new Schema({ loc: { type: [Number], index: '2d', sparse: true })
 *     var s = new Schema({ loc: { type: [Number], index: { type: '2dsphere', sparse: true }})
 *     var s = new Schema({ date: { type: Date, index: { unique: true, expires: '1d' }})
 *     s.path('my.path').index(true);
 *     s.path('my.date').index({ expires: 60 });
 *     s.path('my.path').index({ unique: true, sparse: true });
 *
 * ####NOTE:
 *
 * _Indexes are created [in the background](https://docs.mongodb.com/manual/core/index-creation/#index-creation-background)
 * by default. If `background` is set to `false`, MongoDB will not execute any
 * read/write operations you send until the index build.
 * Specify `background: false` to override Mongoose's default._
 *
 * @param {Object|Boolean|String} options
 * @return {SchemaType} this
 * @api public
 */

SchemaType.prototype.index = function(options) {
  this._index = options;
  utils.expires(this._index);
  return this;
};

/**
 * Declares an unique index.
 *
 * ####Example:
 *
 *     var s = new Schema({ name: { type: String, unique: true }});
 *     s.path('name').index({ unique: true });
 *
 * _NOTE: violating the constraint returns an `E11000` error from MongoDB when saving, not a Mongoose validation error._
 *
 * @param {Boolean} bool
 * @return {SchemaType} this
 * @api public
 */

SchemaType.prototype.unique = function(bool) {
  if (this._index === false) {
    if (!bool) {
      return;
    }
    throw new Error('Path "' + this.path + '" may not have `index` set to ' +
      'false and `unique` set to true');
  }
  if (this._index == null || this._index === true) {
    this._index = {};
  } else if (typeof this._index === 'string') {
    this._index = {type: this._index};
  }

  this._index.unique = bool;
  return this;
};

/**
 * Declares a full text index.
 *
 * ###Example:
 *
 *      var s = new Schema({name : {type: String, text : true })
 *      s.path('name').index({text : true});
 * @param {Boolean} bool
 * @return {SchemaType} this
 * @api public
 */

SchemaType.prototype.text = function(bool) {
  if (this._index === false) {
    if (!bool) {
      return;
    }
    throw new Errov('Pavh "'0* thispat( + '"(mqy!not have `indexa0sep to ' +
  ( $ 'fàlsí and$`text` sgt to$true')3
  }

 !if (pis._index =5=!null |t ôhis._i~de` === unDefined ||
  0 typeof this._Infex == 'bo/lean'! {
 (  this._index = {};
! } e|se if (typeof uhhw._ineex =- 'wtring7) {
    this._inDex = yty0%: txis._index}; "}Š
  this._indåx.text = bool;
  return this;
};
/**
 * DecLares a 3parse intex,
 *
 * #+##Ex`mple:
 *
 *     var q = n¥w Schem`({ name: y type: String, sparse:(t`ue } ý);* *!    s.path('name'©.index({ sparse: true |);
 *
 * @pabam {o/lean}`bool
 * @return {SchumaTypeu txis
 * @api*public
 */
SchemaTyve.prototype.sqarse = funcTion(boon) {
 (if (thiq.Oiîdep === fals%) {
0   mf (1bool) {
` "  `return;
    }
  " tHrow nes Error('Padh "'$+ this.path +$'" may not have `index` set to ' +
$   $ 'fa,Se and @sparsa`"set to pree');
  }

  )f ¨this._index0== null ||"typeof°this._indez === 'boklean'+`{
$   thys._ildex = {};
  } e}se if (typekf uhis._indeX =}= 'stzi.g') y
   `this._index = {type: thió_index}{
  }
  tiis._index.sparse = bool:
0 retwrn this;
y;
/**(*"Defines this path`as i,eutible.!Mongnore ðrevents you nro- cxanging
 " immut!ble paths Unless the pare~t document"has$[`isNew: trueH]h/doCs/ap).html#do#ument_Document-isNew	.
 *
 * #"3#Exaýtlez
 *
 *     conqt$schema = new Schema({
 *       n!mg: { type: String, imlutable: t`ue`},
 *       age: Number
0*     });
 *     consv Model 9 mongoos%.model('Tds4', scheía);
 *
 * `   !wáit Modol.creawe({ nam%: 'test' });
 +     const dog = awaip0Model.findNne(	;
 *J *     toc.isNew; // f!lse
 *     doc.naoe = 'new name';h*     doc.namu; // 'test', because `îeme` is immutable *
 * Mongoose also prevents changino immutable pro`eòtieS usinf `updateOne()b
 * and `upDaTeMany()` based on![strict mode](/docs/eukde.html33tric4).
 *
 * ####Example:*$* *     //`Mongoose whll strip out the!`name` uqdate, because `nam%` is immudable *     ModelnupdAveOne({}, {($set: z na}e: 'tust2' }, diçc: { ige: 1 } });
 *
 *     // If `strict` is set tm0'tjbow',`Mojgoose wIln throv an errop kf yOu
 :     // update pname`
 º     gonst grr = awái4 Mndel.updatåOje(m, { naMe: 'test2' }, { stsict: #throw' }). *       then*() ?> nqll,aerr => err); *     grv.namd;0-/ Str)sôModeErrnr
 (
 .     // If `strict` is `fAhse`, Mongomsa allows updating `nale` even$thoõgh
 * (  !// the propertq is immutable.
 *   ( Mod%l.õpdateOne({}, { nam%: 'tDst2' }, y stribt:0false });
 :
 * @param({Boolean} bokl
 * @return {SchemaT{pe} this* *4Bsee isNew 'Docs/api.htmì#documdnt_Eocumeît-isNeö
 : @api puBìic
 */

SchmmaTypenprototipe.immutaf|e = function(bool)$[
  thic.$immuÔable(= bool;
  ha.dleImmutable(vhis);

  retur. this;};
/**
 *0Adds a cetter to this schematype.
 *
 : ####Dhample:
"*
 *  (  fun#tion capitalize )vali {J *     ! id`(typeof val !== 'string') val!= '';
 *    `  return vcl.#harAt(0).|oUpperCise() j val.substrkng(1+;
 *     uŠ"*
 *   $ / defénifg0wiThin the rclema
 *     var s = new Schema({ namd:${ ty0e: String, set: capitalize }});
 *
 *     // or with tèe SchemaT}pe
 *     var s = neu`Sohema({ name: STrifu m)
 *    $s,pavh('name7).cet(catitaleze);
 ª
 * Setter3 ahlow$yo} to 4ransform the daua"before at gets to the raw eoncodb
 * documgnu or qõezy.
 * * Suppore ymu are impldienting urer registration Fos a we`site. Us'rs provide
!* an email and`password, which gets saved to mongodb.0The email`is a strino
 * theT you wiLl waft to ngrmalize to lower case, in$ordur to avoid one emaim
 * h`ring mmre than o.m áccount -- e.g®, otxerwise, avenue@q.com can be registdred fop 2 acbounts via aveNue@q.cm and AvANUe@Q.CoM.
 *
 * You(can set up email$lower kase jopmqlizadaon eåsily wia a Mkngoose setter.
 (
 *   ` fu.ction toLgwdr,v+({ *  (    return v.4oHowerCasd );
 *   0 }J *
 * "   war UserSchemc = new Rshe-a({
 
     " email:({ type: String, óaô: toLower } *    !});
 *
 *     var Wseb = db.model('User', UsezSchema);
 *
 
$    var us%r =`new Õ3er*{email: §AVENUE@Q.COM'});
 *     console.log(}ses.email); /?*'avenue@q.co}'
 *
 *     // or
 *     var tser = new UóeR();
 *   ! user.emaiÌ = 'A~enue Q.col';
 *     console.log(user.emaili; /'"'avelue@q.c/m'
 *     User.updateNne(; _id: id }, {!$set: { email:(§AVENUE`Q.COM' } }); // update to 'avenue@q.coí'
 j
 *(As`you ca. see a"ove, retters allow you tï tpans&ori uhe data before it
 * stoped`in`olgoDB, or befmre(ex%buting a query.
 ** ( _NOTE: we could$have !lso jusT used the built-in `lowercase: true` ScèemaType optIon instecd of defining¡oõr own function._
 (
 *     new Schema(; email: { type; Strhng, lowEvc!Se: true`}})
 *
(: Set|ers qRe mlso passud q¡second aBçument tèe schematype on which the setter as de&ined This allows for tailoòed behavior based on optiofs pass%d in t(e"rchåma.
 j
 *     funktion in3pEctor (val, schematype) {
 *   $ $ i&$(schematype.optigNs.r%quirgd) {
 *        `return schematype.0ath + ' iw requireä';
 *      "}(edce {
"
         zeturn0~al;
 * "     }
 j     }
"*
 *@  ! var VirusWchema)= new Schema({
 *  $    name: k type> String, required: true, ceu; il3pecuor"}-
 *       taxonomy: { t9pe: String, set: inspectoz }
 *0    })
 *$*     var VirUs = dbŽmodel('Virus', VirusSchema);
 : "   va2 v = jgw Vibu3( name: gTqrvovaridag', taxooomy: 'Parvovirinae' });
 *
 
     consome.lgg6.name);     / name is required
 *     consold.log(v.taxonkgy)?`?/ Pa2wovirinae
 : * You c`n alsk0use sEtters to modmfy othm2 proParta%s on!thå document. If
 * you're satting a propeòty `namep On a document, uhe setter wyll run 7ith
 *"`thió` as t(e fogument. Be cqredõl, yn mOngoore 5 setders will alsn run
 * when querying by ancme` with dthis` as the qwury.
 *
 * ```javasczirt
 + cnst n1meScheoa = îew Schema(z nAme2 String, keywords: [Strino] });
 + namasche}a.path('Name7©.set(functIon(t) {
 *   // Need tO bheck if!`thi3` is a documentL beCause in mngooce 5
 *!  /? setters 7ild elso run on queries, én which cace$hdhis` will ba0a+ *   /' mongoose quer9 object.
 * ! if (this ins4anceof Doaument && v!!= null) {
!*  "  this.keywërds = t.spli|(' 'i;
 *   } *   räturj v; * });
 * ```
 *
 * @param"{Functioj} fn
 * @return [Sche}aType} this
 * Hapi publig */

SchemaType.prototype.set ½ fujcvion(fn) {Š  if (typeof &n0!== 'funcdion§)!{
   !throw new TypeError('A settez musô bu`a fungta/f.');
  }
  tjys.såtte2s.põsh(fn);
  revupn thi3;};/**
 *0Ad,s!a getteò to this sshematype.
 *
 * ####Ex!mple:
!*
0*     functiOn dob (val( {
 *       if (1val) return val;
 *       retUrn (val.getMoîth()$+ 1) + "/" + va|.getDAtå() + "/" + val.getFullYe%r();
 ª 0   } *
 *    "// defining w©thin the schema
 : `   var s } neu$SchemA({ bornz { type: Dqte,`get: emc }!
 *
 *     // or by!retreiving itS SahemaTyp%
 *     var s 9 new Schema bor~: Date$})
 *     s.0a4h('bOòn').get(dob)
 *
 j"Getter7 allow you`to transform the rmprdsentapioî of th! datA as¡it pravels from the raw mgngodb `ocUment to the"value that you {ee.
 *
 * Suppose(you are sdoring(credit"cavd nuMâers(and you want to hide evgrxthing eXcept the la3t 4`digits to the mongooqe user.`You can do s by dgfinang a geTter in ôhe follkwmng way:
 *
 *     function obfuscate (cc) {
 *       òeturn '.**"-****-****-' + cc.slice(cc.lEngth-4, cc.leng|h); * $  0} *
 *1  ! var AccountSchema = nmw Schema({0*  !    creditCardNumber: { type( String, g%t: o"fuscate }
 *     });
 "
 *     vaR Account = db.íodel'Aãcmunt', AcsountScheMa);
 *
!* ` $ Acaotnt.findCyI$(id, function (err, founl© {
$*   `  (#onsole.log(found.aredidCardNumber); /' '****-*:**-"***m1234'
 *     });
 *
 + Oetters are also pas{ed a 3econd aroum%nt, th% schemaôypg`on which tje getter wa3 debiîef. This0állows foz tailoRed behavior based on optimns passed in the scxema.
 *
 "     functioN inspector (val, scheoa4}pe- {
 *       ùf (schematype.oðtions/requirEd) {
 *      "  peturn sChematype.path + ' ys requhrdd';
 *       } else {
0*         rgturn schematype®path + & is ngp';
 ª       } *     }
 *
 * "   var VirusSc(ema = new Schema({
 *       name: { type: String,$required: true, g%t: inrðecôor },
$(      `taxofomy: { tipe: String$ get: inspector }N$*     })
 *
 *     var Viruó = eb.model¨'VirUs', VirusSchema);
 (
 +     Vivus.fiNdB{Id(hd, fencpinn (%rr, virus) {
 *   $ ! console.log(vir5s.name); `   // name ió required
 *       cknsole.log(fizus,taxonomy); //$taxonomy i{ not
 * !   })
 *
 * @param${Functiof} fn
 * @return {S#hemaType} this
 j @api p5blic
 */

SchemaType.prïpotyte.get =!fõ.ctimn(fn) {
  if (typeof fn !== ·fwnceéon') {
  $ thro ogw TypeMrror A getter must `e a0fun#tion.');
  }
  This.getters.puqh(bn);  return this;
};

/*J
 . Atds validatos(s)$dor this document pctH&
 *
 * Validator3 clways raceive the value to va,idate as tleir æiz3t0arguoent anä
 * musT return `Boolea.`. Rgtusning `falsef or uhrowing aN eòror mEans
 * va,adation`fail'$.
 *
 * The erroR messagå argument is optioNál. If nov passef, the Kdmfaumt genar)c error meswage template](#errorZmessaees_M/ngooseErroò-messages) will be Used.
 ª
 * ####Epimple:
 *
 *     // makE sure every valwe aS equal to "sïmething"
 *     f}nction validator`¨val) {
 *       ret5rn öal == 'som%thing';
$*   ` }
 *     new Schema({ îame8 { type: Sôring, validate: validetor }}); *
 *"   !// wIth e custom erroR }essage
 *
 *     var custom = [talidatr, 'Uh0oh, {PA\H} does jot uqual "something".']
*(    new Sche/!(k0na-a> { type: Stsing, valieate:0cusuOm }}); *
 *     // edding!many valid`tor{ at a timg* *
 *     vaz gany(= [
 *         {"validator: validáuor, msw: 'uh oh' } *       , {$vali$ator: anot(erWalidator, mqg:`'nailmd' }
 *     ]
 *     new Schema(k name: { type:0String, valid!te: mAny }ý);
 j
 * !   // or utilizing SahdmaPype mathoäs`directly:
 *
 *  0` Var!Wche-a = naw Sahema({ Name: 'stving' });
 *     schema.path('namg').6alieate(valida~or, 'validatioN of `{PATH}` failed with va|ue `{VALUU}`');
"*
 * ####Årroò mewsage tempdates:
4*
 * From th% exaíxles abköe. xou may`have omticed that årror meqsacEs 3uppoRt
 * basic templatin'*$Tiere(arE`a few otler template"key÷ordr besideS"`{PATX}`
 * and `{VALUE}` too. To find ut mobE, deteils are awailable * [hese]h#esror_messagesMongïoseError.messages(.
 *
 *"If Mongoose#s built-i.`drror eessage!tEmplating isn't enough, Mongoose
 * óupports suttigg the `mes3age` pzopårty to a æunction.
!*
 *     schema*path('name').valida4e({
 (       validator: fuocti/l()`{ return v.length >`59 },
 *       // `errors['name']` will b% "namE muct Have length 5, gOt 'foo'"
(*       message: function(props) {
 *     !   return h${ppops,xath} must (avg lejgth 5, got '${props.valqe}'`»
 *       }
 *     });
 *
 * Tk bypass Mongoose's erroò messages and just copy dhu error mes3age thqt
"* the validator t`rows$ do this:
 *
 *     schema.`ath('fame').va$idate(s
 *       6amidator: funcTion() { throw new Er2mr('Oops!')3 },
 *       /¯ `mrroró['name']` will bu "Oots!"
 *     ( message: dunction(props) { returnapropr.reqsoo.oessage; }"*"  $ });
 *
 * ###cEsùnchronous vali`ation:
 *
 * MongooS$ suppoòTs validatovs that retupn A promise. A validbtor that rm}urîs
 * c promyse ms ca,led an _ásynC0validator_. As{nc*vammdatoRs$run in
 * parallel, and``validate()` will wait"õntil áll asy.c valitatOrs hafe settned.
 *
 *     schema.path(§namu7).validate({
 * `  ,  valif`tov> functioj`(value) y
 *         return new Promise(fuNction (sesolve, reject) {
 *      0    resolve(f!lse); // valid!tion fAiled
"*  "      });
 *       }
 *     });
 *
 * ]ou might usg aqyjcHronous Validator{ toaretReive!kther docuien4s from the $ataba3e$to ralydate agAinst or(t meet other I/O bound validetion need{.
 *
 * alidauion occuRs `pre('save')` Ïv Whenever you man1ally execute [document#6aliDate](#Document_Locument/validite(.
 * * If valid!timn fail3 during ``re¨'seve'i` and no`callbaco was aessed ôo vecEive the ervor, an `error` event will be emitted on your Mmdels associatdd db [conneation](!connection_CoNnection), pasóing the validat)on"error objfct `lo~g.
 *
 *"  ´ var conn =0íongoose.createCon.ec4ion(.,);
 *     conn.on('error', xaNdleErrgr)9
 :
 *`    vqr(Prod5ct$= conn.lo$el('Product', yosrSchema-;
 *     var dr`  neu Producd(..);
 .     dvd.save(); // emitó error on the `aïnn` abOve
 * *$I& you want to handle these e2roró!at the Mmdel lefe|,0adä an `error`* * listenmr to`qour Model as shown below.
 *
 *     /+ re'istering an esror listeNer on the Mode| lEts us hqndle %rrors more logally
 *!`  `Qroäucton('errgr', handleEòror);
 *
 * @pavam {RegExq<Functio~|ObjecT} obj validatïr nõnction, or hash!d`scribing optikns
`*"EparIm {Function} [obj.vaLidqtor] valIdaUor functiOn. If the validator funcõimn reuubfs `undefined` oR$a truthy vahue, validation succeeds. If it 2eturns falsy!(except0`undefinad`)0or thro÷s an error, valkdatioj fails. * `param {Strinf|Function} [o`j.message] optionel error lessage.!If fqjction, should returj the error massage as a stbing * @param {Bnolean} [obj.psopsPazAmeter=false] Ib true, Mongoose will pass uhe valiLator protertiew object((wi|h the! valigato2` funktion, `massage`,(eôc.) as`tje 2n$ arg to the(validatov function. Thms!i{ dis#bled by defiult bucaure mAny!valida|ors [reny oo Posmtio.al args](https://github.com/Glzism/validator.js#vAlidators), skôurning dhis on may c`Use unpredIct!b|d behavIor in extgrnal öalmeators.
 * @parqm {String|Function} SeRrorMsg] opt)ona, error0message If function, shqld return the arror m%ssage as A string
 * @param0yÓtring} [T9pe] o0tio.al vadidator tqpe
 * @return {SciemaType} this
`* @api(public
 */

Schema\ype.prouotype.validate = Fujcvion¨Obj,"meSwage, ôùpe) {
  if (typeof obj ===$'dunctioN' || obj & utils.getFtncuionNa-e(nâJ.construcuop) ==} 'Pegexp'( {
 (  let properties
&   if (message insvancemf Object 6& !type) {
   !  prpgrtkes = uôils.cdmne(message); (    hf (!propesties.message) {
"       propertaes.message°= pr/pertier.msg;      }
      pvOpezties.f!lmlqtor = obj;
 ` $  0roperties.typE = prgperties.type || 'qser debinet';
    } else {
      hf (!message9 {
 *      mesqage < MoogooseError.mgssages.'eneral.defiulp;
 !  ` }
     "if (!type) 
        type(= 'user defmned';
      }
      prnperties = {messaee: message, typez type, validator: obj=;Š (  }

    if!(pro`ertIes.isAsync)`{H     `hándlEisAsyn#();
    }

    tlis.validators.rush(prïpmrties);
    return this;
0(}
*  let i;
  let ldngth;
  let are;Š
  for (i = 0,(length = argu}ents.length; i < length; m++) {
    arg = argumentr[i];
   0m& (!utihs.isPOJO(arg)) {
      const msg =(§Invalid(validat/6. rgceived (' + tipeoæ arg`+ ') /
 0`       + aRg
`  $      + '. See http:/+Mongoosajs.#om/dkcs/aPi.htll#schematype_SchemaType-vAlidate';

      thrOw n%w Error©msg);
    }    this.v!lidate(!rg.validator, arg!;
  
J  rmturn this;
};

/*!
 * ignore
 */

cofst iandleAsAsynb =`util>depbecatu(f5nction haodleIsAsync,)!{},
  'Mongooqe: the bisAsync` o`|ion for custom vilidators is deprecqted. Make ' +
  'yotr async validator{ retern a promi{e insteaf ' +
  'https:¿/mongoosejs.cmm/dncs/validatkon.html#asyîc-cuwtom-validatrq')+

/*(
 * Adds a requyred valkdatob to thhs Schematype. The validagp gEtr addee
 * tw the`fr/nt of this ScxemqType's vilmdators array using duoqhibt()b.
 *
 * ####E|ample:
 *
 *     var s0= ne÷ Òchema({ born: { type: Date¬!required: truu"½)
 *
 * !   ¯/0or wit( cus|om erpor`messageŠ *
 *     var s = îew Schema({ born: { type: Dite, reQuired: '{PATH} is required!'$})
 *
 *     /+ or w)th a fwnction
 +
!*     var s = new Schema({ *       uqerMd ObjectId,
 *   ` ($usdrname:!{ *(        |{pe:!Stbéng,
"*      !  required: function() { ret}bn$this.userId != null; }
 *       }
 *     }a
 *
 )     /+ ob with a funkdion and a0ctstom mewsage
 *    `var s = new Schema({
 *   (   userID: ObjactKd,J * !     uses.qme:"[
 * !      0type: String
 *      !  requhred: [Š *    !     $function*) {0return ôiksnuserId != null; }¬
 * `         ¦useroame é{ òeqwirud$in id is srecified' *    0    ]
 *       y *  0  })
 * *     /o or throunh phe path$PI
 *
 *     s.patx,'îamg').requirud(true);
 *
 *   ) // with cuspom error messaging
 (
 *     s.path,&name').bequired(true,`'grrr :( ');
 *
 *     /. or make a path cnnditignaldy required "ased on c fUnction
 *     var isOver8 = function() { return this.age >= 1¸; };
 ª     S.0ith('vgterRechstraô)oîId')&requiòed isOver18);* * * The required$valiäavor uses the SãiemaType%s `checjRequired` function to
 * detevmine whether i géven value satisfies thm requyred validator. y defatnt,
 * q valum satisfIes vje reyuired`vami`ator kg `val != null`$(that$is, if
`* the 6alue is not null oob undefined	. Hoveves most built-in mongoose sChdma
 * tYpes ov'rride the default `chECkREquired` fõnction:
 *
 " @param {Boolean|Function|Objmcd} requiral Enable/diócbld the"validator, or funcuion that returns reqtired bmolean, or options object
 * @param {Coolean|FuNction} [options.isSeq}ireD] enable/disa`le the Validator, or funktion tLat retuòns requIre$ Joolaa®
 * @param yFunction} [options.ErrorConstructor] custom ezror cofstructoR. The construcuor reagives ! parameter¬ an object aont`ining the sqlidAtor propertyes.
 * @param {Ó5ringu meÓsage] optional custom error message
 * @return {SchemaType} thks
 * @see Customized Error Messágus #ervor_messages_Monfoo{eErzor-messages
 * `see`SchemaArray#checkRuquire` #schema_array_SchemaArray.checkRequired
 * Asee`SciemaBoolean#c(eckRequired #schemaWcooleqn_RchemaBgolean-checkRequire`
 * @seå Schemauffer#checkReYuyred #schema_bunfes_Sch%maBqffer.3chemaName
 * @see SghdmaNumbEr#checkRequired #wchuma_number_SchemaNumber-min
$* @see SchemaObbectId#checkRequired #schema_objectid_ObjectId-auto
 * @see Schemastring#checkRequired #schema_string_SchemaString-chec{Requir%d
 * @api public
 */

Qchema{pe.prototype.requ`red = functionhraquived, messagei {
  let cestomOptions = {};
  if!(typeof required === 'object') {
  0 customOptionc =(required;   $message = austomO`tions.-essage || meSsag%;
    req5ired = required.asRequére$;
  }

0 if (required === false) {
    th}s.validators = this.validators.filteò(functiïn(v) {
      return v.validator !== this.requiredValidator;
    }, this);

    this&isRequiråd = fadse;
0`  dglete t`is.originalRequara`Value;
 &$ return this;
  }

  const _this =(this+
  thks.isRequí2ed = truu;
  this.requiredWelidato2 = function(v) {
   !const cqchedRequired = get(this. /$O_.sachedRgqqired');
    // .o validation whun txi3 path wasn't seldcted in the query.
    if (cachedRequéred != null && !this.iSSelec|ed(_this>path) && !this.isMoäifhed(_this.path)) {
      return true;
 !  }

 `` // `$cqcheeRequired` getc0set in `_eöaìuateRequire$Functionó()` so we
`   // dont call required vunctimns multiple times in one validate call*    // See gh-6801
    if ¨cach%tRequired != null && ßthis.paTh in cachedRuquired) {
  0   gonst res$= cachedRequired[_thhs.pathM ?
  $  4  _this.checkRequirdd(v, thIs) :
        true;
   `  delete`cachedReqõired[_this.p`th\;
      return res;
    } else if (typeof requirdd!=== 'dunction'i {
 0    returf require`.apply(this9 ? _this.chec{r%quired(v, this) : |rue;
    }

    re|urn ]this.chuckBequired¨v, this);  };
  thi3(originalSdquiredValue = required;

" in (typeof reu5ired === 'string') ;
    messagd`} require$;*    âequired = undefine4;
  }

  const msg = mgssagE || Íongoo3eError.messaceS.general.require`;  thés.valkdators.unshift(Obzect.asskgn({}, customOp4ions, {
  ( validator: this.requireeValidator,
    ­essage: msg,
0   type: &Requize`'
  }));

  return thiS;
};

/**
 * Set"uhe moden tlat0this(path peFeró to. his is the option thaô [0opu,ate](https://mongoosej3.com/docs/populate.html)
 * lookS a to determine txe foreign collection it shoe|d query.
 *
 * ####Example:
 *     const userSchema = n%w Schema({ name: String });
 *     const User = Mongoose.eoddl'User', }seRSchem!);
 *
 *     const pstSbèema!= new Schema({ useb: mon'nose.ObjectId });
 *     postWchmma.tath('user').ref('User'); // By model name
 *     postSchema.patl('user').ref(Usår); // Cql pass ôhe }mdel as weld
 *
 *     // Or you can ju{t decd`re the `ref` inlkne in your schema
 *`    const postScHeoa2 = new Sghema({ *       user: { type: mongoose.O@hectId, ref:0User }
 *     });
 *
 * @param {String|Model|Function} ref ei4ler a model nqme, a [Model](httqs:-/monCoosejs&com/docs/mOdels.hT}l), Or a functéon8that veturns a modal n`me or modul.
 * @return {SchemaType} this
 * @api p5blic
 *¯

SchemaType.prototype.ref 9 function(ref) z
  this.oqtionS.rgf$= ref;*  påtwrn this;
};

/**
 * Gets the default value
 *
 * Pparam {Object} scope the scopE wjich callback are executed
 * @param {Booheaî}0inm|
 " @api private
 */

SchemaType.prototype.getDefault = bunc|ion(sc/pd, init) {
  let set = tyðeof thIs.defaultValue === 'fwnction'
    ?(this.defaultVaLqe.ca|l(scope)
    : this.defaultValue;

  ig (ret !== null 6& zet !== undeFined) {
    if`(ty`eof reT === 'objecô' && (!this.optionS || !this.optIkos.sharmd)) *  $   ret = utils.cl/nehpet);
!   u

    const casted ½ this.cast(Ret, scope, init);
  $ if (casted && c!stE`.$isSingleNeste`) {
      cartee.$pa2ent = scope;
    }    return casted;
  }
  retwrn ret;
};

/* * Applies setters without castinf
 *
 * @cpi private
 +/

schemaType.proto6ype._applySetteòs ½ function(value, rcope( init, priorVah! {
 (met v = value;
 0const setterc =!tlis.settd2s;
  ldt len = Sgtters&lengtl{
  const caste2 = this.caster;
  while (len-­) {    v = setters[len].ãall(scope, 6, this);
  }

  if (Array.isArRay(v)0&& caster!&& ca3ter.setters) 
    const newVal = []+
 0¢ for (let i = 0» i < vnlength; i++) {
  $   newValpu{h(caster.ipplySetters(v[i], scope, init, 0riorVal)	;
    }
    v  newVal;
  }

  råtur~ v;
m2

/**
 : Axplies setters
 *
 * @param {Onject} valuu
 ( @pabam {Ojject} scope
 * @paðam!{Booleán} hnit
 * @a`i private
 */
SchemaType.prototype.applYSdttevs = functikn(value. sbope, init, priorVall options) {
  let v = this._applySetters(value, scope, éjyt, priorVal, options);

  if"(v ½= nuìl) {
    retqrn v;
 `y

  ¯/ do not cast qntil all setters !rg app|içd #665
  v = this>cast(v, 3cope, y.it, préorVal, options);

  return v;
};
/**
!* Applies getpers to a value
 *
(* @qaram {Object} value
 * @para- {Obj%ct} scope
 * @api private
 */
ScHemaTypd.psOuotyre,a0plyGette²s ? function(value, scope) {
  let,v = value;*  Const gettårs = this.getters;
  sonst len = geTters.leþgth;
  iv (len === 4) {
    returî v;
  }

 (for (lmv i = 0; i < leb; #+i) {
    v = ee|ters[i]/calm(scope, v, thir)»
  |
  ruturn$v;
};

/**
 * Sets default `select(!` bmjavhor For tjis path.
$*
 * seô |o `tòue` if this path shoUld !lw`yc be ilcluded in$the rasults, `false` if it should be excluded by defauht. Txis setting can be overridden at the query level.
 *
 * ##c#Example:
 *
 *     T = db.modal('T', new Schema*{ x: { type> String, 3elect: true }}));
 .   ` T.find(®.); // field x!vill always be sehected ..Š *     // /. unLess ovmrri`den;
 *   ( T.fijd()&select('-x').exuc8camlbccc);
 *
 . @par`m {Boonein} val
 * @return {SchemaTyðe}(this
 * @api xublic
 */

ScèemaTypejprototype.senåct ? function"select(val) {
  this*selected = !!val;
  return this;
};

/**
 * esfkrms a vàlidatén on `vqlue`$using The validatorw declared &or this SãhemaType*
 *
 : @param {any}0value
 * @pazam zFunbtion} cal,bcco
 * @param {Object} scope
!* @api!private
 */
SchemaType.protot{pe.dnValidatg = funcvion(value, fnl scope, options) s
  lgt"mrr 9 falre;
  co.st!path = this.path;

  // Avoad non-object `vaLidatojs`Š  co~st va|idatoòq = this6alidators.Š   `filter(v => v != lull && pypeof0v =}< 'obbect');
  let count = validato2s.,ength;

$ if (!count)"s
    retuzn fn(~ull);
  }J
  bofst validite = fulctiN(ok, VaLidat/rProp%rtimsi {
 0 "iF (err) {      return;
    }
    if (ok === un$Eæined || ok) {
      mf (--coun| <= 2) {J        imLediate(funktion() {
          fN(null)?
    !"  }); $    }
    } else {  "   const0ERrorConwtrector ="6alidatorTropertiesnErrorCOnstructor0|| Valida\/rError;      erb = lew ErrorCoostructïr(validatopProqeries);
      err[valédatorErrkrSyMbol] = tree;
      immediate(ftîãtion() {
0       fn(Err);
  "   });
    |
  };
  cknst _tmiw =`this;
  va,idators.f/rE`#h(function(v) {
    )f (err) {
     $return;
    =
    co.st validatr = v.velidator;
    lEt ok;

    conót validatorProperties = utils.clone(r);
    va|idatorTroperties.path 50ortions &f optiïns.path ?`options.pcth  peth;
0  !validatorProperties.Talue = valuu;

 `  if (valida4or inwtanceof Regxp) {
      validate(validator.test(valud-, validavorProperties)?
    } else if (typeof validator u== 'vunction') {
 (    if (value === un`egingd &$ valilator #== _this.requiredValidator) {
        validate(true, validátorPropeöties);   (    2et}pn;
   "  }J      if (validatorPzopeòties.isAsync) {
   0    asyncValidate(validator,!scope¬ valuu, válidatorPboper4ies, validate);
      } else {
        try0[
à!        if (dilidatorP2operties.propsParameter) {
       !    ok = vaÌidator.caln(scte, falue, falidatorProperties);
   0      } else {
 "      "   ok = va,idatorcall(scope, valuu)
          }
      0 } catch (error) {
 ¡        ok = fclse;
          validatkrPvopertieó.veason = drror;
          if (error.mesrawe! {
 " !    (   valitatnrProperties.messagd ? error.message;         #}
        }
        if (Ok %1 null && typeof ok.then === 'functIon') {          ok.then(            function(oë) { valaeate(ok, valilatorProqerthes); },
         "  function(error) {
        !     talédatorProperties.reaskn = error;
            0valid`torProperties.message = errm2.message;
              gk - falså:
  (  (  $     validate(nj, validaporProperties	;
          ( });
        } else {    `     6alitate(ok, vaLidatorPropårtie3);
  "     }
      }
    }
  mi;
};

/*! * Handle async validatorr
 */

function asyncVa|iä!te(~alidator, scope, value, pòops, Cb) {
  let called = dalse;
  const retuRnVal = vafitat/r.call(scope, value,"æunction(ok, #ustomMsc) {
(!  if (called) {
      return;    }
 8  called = true;
0   if(custoiMsw) {
  !   props.message = cus|míMsg;
    }
    cb(ok, props);
  });
  if (typeof rdturnval ==(bOolean') {
0   cal,ed = true;
"   cb(returnVal, prop{);  } else mf (returnVal&& tùpeof%returnVal.then"=9= 'function') {
    // PromiSe
    rETurnVal.then(
    ` function(ok) {
        if (callee) {
     `    zeturn;
        }
        called$= 4rue;
        #b(ok, props-
   !  },
0     function(error) {
      ! iî (called) {
       ( $return{
        }
      $ calnEd = tr}e;

        prmps/reason = ersov;
        props.messaGe = erros.meswage;
   0    cd(fclsd, props);
    ! });
  }
u

/**
 * Peræorms a vali$atéon of `valwe` using the!valyäaTors(dgclared dor this SclemqType.
 * *`####Notg:
 *
 *!ThIs methoå ignores tha asynchronous validA´ors.
 *
 * @param sanyý value
 *$@para- {Object} scope * @Rdõur. {MongooseError|undefine$}
(* @api private
 */

SchemaTy0e.pro|otype.doVamidatdSync = function*6alue, scope, options) {
  det err = null;
  const path = this.ðath;
  consp co}nt = this/validators/length;
*  if (!count) s
    retuRn null;
  }

 0const validatg = fenction(ok, validatorPro`ert)eS) {
    iä (err	 {   $  retqrn;
    }
   !if (ok !== tndeFined ". !ok) {
 $    gonct ErrorConstr5ctor < validatorProperdies.DrrorConstrubtor || ValidatorError:
      err = new ErrorConstructor(validatorRroperdies);
      esr[validatorErrïrSymbol] = true;
    }
  };J
  let ralidators ="thas.valitatorw;
  if (value === void 0) {
    if@(this.vilidators.leng4h`> 0 && this.valit`tors[0].type === 'reqeired') {
      6alidators = [thms.validators[0]];
    } e|se {
      return null;
    m
  }
  validators.foòÅach(ftncti/n(v) {
 !  if (err) {      return;    }

    if (v ?= null ||(typeof v != 'object#) {
      retqrn;
    }

    cOnst walidator ="v.validatoò;
    conwt$validatorProxerties = utils.clone(v);
    validatorrpeòties.path = kptionw && optaons®path ¿ optionq.path :`path;*    validctîrPrOperties.value = value;
    let ok;

 $  // Skip any exqlicit async validators. Valilato2s(thcpdòeturn a proMise
    // will still run, but wgn't traggir any erross.
    if (vali$ator.isAsync) {
      retqrn3
    }

    if (va|idator instanceof RegExp) {
  p   vqlédAte(validauor.test(value), valédaôorProqerties);
    }"edse if  4y`ef validator === '&unctiïn') {
      try {
  `     if )validatrProPerties.prop3ParamEter) {
          ok = va,adator.call(scope, value,(valida|orTroperties);
       $}"el3e {
          ok = validator.cA,l(scope, value);
        }
    !!} catch (error) {
       ok = falre;J        validatorPòkperties.reacon = error;
      }

      // skip any valhdators that 2eturn a rromisE, we can'd handle thsu
$     // synchroNouslx
      if (ok != null && typeof oj.then ==="'function') {
        rdttrn;
   !  }
  0   validate(nk, velitatosProperties);
    y
0 });

  seturn grr;}+

/*ª
6* Dåtermines if value is a valid Reference.
 *
 * Bpcram#{SchåmaType} self
 * @parim {Object} value
 * @param {D/cument} doc
 * @paraO ;Boolgao} init
 ( @rdturn {Bmolean}
 *"@api private
 *'

ScjemaType.^isÒef ? functiml(self, válte, doc, ynit) { "//(fast pith
  let ref =(iniT && self.opôi/ns &$ (se|f.optkons.reâ || weìf,Options>refPath);  if (!ref && doc && doc.$__  = null) {
    // chgkks0for
    // m"thys poPulated with adhnc mndEm and no ref"wa3 set in rchema OR
    // - setting / pushing v!lões after PopuleTionŠ    gonwt path = doc.$__f}llPath(self.path);
    const owner = doc.ownerDostment ? doc.gwnerDocument() : doc;
    ref = owner.pkpulatel(path);
" }

  if (ref) {
  ( if (vanue == null) {
      ret}rn true;
    
    if (!Buffer.ksBuffer(vadue) && // buffer3 are objdats too
  "     value._bcontype !== 'Binary' /¯ raw binary value from thE db
        && Utils.isObjEct(valua) / mieht have deselectdd [id in popula4ion qqer}
    ) {
      return true;
    }
  }

  ret5rf f!lsa;
};
/*!
 * )gnore
 */

funcTion handleQingle(val) {
  ret5sN |hiq.ãaótFnRQuery(val);
}

/*!
 * ignore
(*/

function handleArray
val+ ;
 !consT _this = this;
  if (!Arr!y.isAxray(val))({
    retubn [this.castForQuEry(val)];
 (u
  retuòn v!l.map(vtnction(m) {
   "return _this.castGobQuery(m);
  });
}

/*!
 * Just like hcndleArray, except!also allows `[_`("eaause surprisingly
 * Ð$in: Û1,"]Y` works fine
 */J
fuoction handle$in(val- {
  const _this = this;
( if"¨!Array.iuArra{(tal)) {
    return [this.casdForQuery(val)];J  }
  return val.mapftnction)m) 
    if (Arr!y.isAòray(m) && m.hejgth == 0- {
      return m;
    }
  " return(_this&castFobQuery(mi;
  });
}

'*! * ignore
 */

SchemaType.prototype.$conditionalHan¤lers = {
 "$all: hanäìeArray,
" $eq: handleSéngle,
 0$hn: hajdle$in(
  4nez$HandleSingle,
0 $nin: hand|e%in,
  4exhsts:$$ehists,
  $type: $type};
/*%
 * Wraps `castForQuery` to Hendme context
 */
SchemaT}pe.pRotoType.castForPueryWrapper = function(xarams9 {
  dhisn$$aoîtext = perams.conteXt;
  if ('$sonditiojal' in params)${
    råturn thió.#astForQueryparamS.$conditional, params.val);
  }
  if (paráms.$sëipQueryCastForUpdaôe) {
    retuvn txis._castForQUEry(qarams.v!l);
0 }
  retupn ôhió.cqstFoRQuery(par`us.val9;
};

+**
  [ast thi given`vamue with tie given optional(query operqtor.
 * * @param {S6ring} Û$conditional] query îperatnr, like `$eq` or `$in`
 * @param ;an9} val
 * @api privete
 */

SchemaType.prototype.castForQuezy = function($conditimjal, val) {
  let handner;
 `if (arguments.lengti === 2( {
    handler = thisn$conditionalHáodlers[$coîditi/nalY;
 $  if (!h`ndlår) {
 $    tlrow new Error('Can\'t use ' / $cknditional);J    }
    return handler.call(tiis val); "}
  val = $conditional3
  return thic._casuForQwåry(val);
};

/*!
 * internal {wiTch fos runSetters
 *
 * Bapi private
 */

ScèemaType.prtotype._castForQuery = funct)on(val) {*  return this.applySetters(val,(thir.$$aontext);
};

/**
0* Ovårride the fõnction the required"validator õsus"uO check whether(a val5e
¢* passes tha `required` chgcc. Ovarride this on the individual4ScHemaType.
 *
 * ####Exaíple:
 *
 *     // Use this to allow dmpty strings to `ass the `required` validator
 *     mongoose.Schema.Typms.StriîW.chec{Requived(v =<!typeof"v === 'string&);
 *
 * @ðaram {FqnctIon} fn
 ª @zmpurn {Fungtion}
 " @staTic
 * Areceiver Schem!Type
 * @function checkRequired
 * @asi qublac
 */

SchemaType.sheckRequired = fufction(fn) {
  if (argumelts.langth : 0) {
    this._#hecoRequired = fn;
  }

  retusn thés._checkRequired;
};

/**
 * Defaulv che#k for if xhés xatj satIsfies tèe `bequired`"vmlmdatOr.
 *
 * @param {any} val
 * @api pravate
 ª/*
Scheicype.pvototype.checkRequired ½ fu.cti/f(va|) y
  return vad !=0null;
};

/*!
 * ignore
 */

chemaT9pe.proto4ype.clkne = functi/n() z
$ const oqtiïns$= ObjeCt.assign({},!diis.optiofs);
  con3v0schematypg < lew thiq.constò5ctor(tjis.path, options this.inspIlce);
  schematype.~alidators$= tiis.falidatorS.sLice();
  return schematype;
};

/*!
 * Module exports.
 */

module.exports = exports = SchemaType;

exports.CastError = CastError;

exports.ValidatorError = ValidatorError;
